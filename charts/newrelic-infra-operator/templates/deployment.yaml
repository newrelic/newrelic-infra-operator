apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Release.Namespace }}
  name: {{ include "newrelic.common.naming.fullname" . }}
  labels:
    {{- include "newrelic.common.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      {{- include "newrelic-infra-operator.appLabel" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
        {{- if .Values.podAnnotations }}
        {{- toYaml .Values.podAnnotations | nindent 8 }}
        {{- end }}
      labels:
        {{- include "newrelic.common.labels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ template "newrelic.common.serviceAccount.name" . }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext:
        runAsUser: {{ .Values.podSecurityContext.runAsUser }}
        runAsGroup: {{ .Values.podSecurityContext.runAsGroup }}
        fsGroup: {{ .Values.podSecurityContext.fsGroup }}
      {{- end }}
      {{- if .Values.image.pullSecrets }}
      imagePullSecrets:
        {{- include "newrelic.common.images.renderPullSecrets" ( dict "pullSecrets" ( list .Values.image.pullSecrets ) "context" .) | nindent 8 }}
      {{- end }}
      containers:
      - name: {{ include "newrelic.common.naming.name" . }}
        image: {{ include "newrelic.common.images.image" ( dict "imageRoot" .Values.image "context" .) }}
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        env:
        - name: CLUSTER_NAME
          value: {{ include "newrelic.common.cluster" . }}
        - name: NRIA_LICENSE_KEY
          valueFrom:
            secretKeyRef:
              {{- if (include "newrelic-infra-operator.licenseKey" .) }}
              name: {{ include "newrelic.common.naming.fullname" . }}-license
              key: license
              {{- else if include "newrelic-infra-operator.customSecretName" . }}
              name: {{ include "newrelic-infra-operator.customSecretName" . }}
              key: {{ include "newrelic-infra-operator.customSecretLicenseKey" . }}
              {{- else }}
              {{- "" | required "Cannot find License Key, either licenseKey or customSecretName must be defined" }}
              {{- end }}
        volumeMounts:
        - name: config
          mountPath: /etc/newrelic/newrelic-infra-operator/
        - name: tls-key-cert-pair
          mountPath: /tmp/k8s-webhook-server/serving-certs/
        readinessProbe:
          httpGet:
            path: /healthz
            port: 9440
          initialDelaySeconds: 1
          periodSeconds: 1
        {{- if .Values.resources }}
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        {{- end }}
      volumes:
      - name: config
        configMap:
          name: {{ include "newrelic.common.naming.fullname" . }}-config
      - name: tls-key-cert-pair
        secret:
          secretName: {{ include "newrelic.common.naming.fullname" . }}-admission
      {{- if $.Values.priorityClassName }}
      priorityClassName: {{ $.Values.priorityClassName }}
      {{- end }}
      {{- if $.Values.nodeSelector }}
      nodeSelector:
        {{- toYaml $.Values.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
        {{- toYaml .Values.tolerations | nindent 8 }}
      {{- end }}
      {{- with include "newrelic.common.affinity" . }}
      affinity:
        {{- . | nindent 8 -}}
      {{- end }}
