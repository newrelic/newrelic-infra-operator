name: CI
on:
  pull_request:
  push:
    branches:
      - main
  schedule:
    - cron: '0 13 * * *'

jobs:

  chart-lint:
    name: Helm chart Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      matrix:
        kubernetes-version: [ "v1.17.17", "v1.22.0" ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: helm/chart-testing-action@v2.2.1

      - name: Lint charts
        run: ct --config .github/ct.yaml lint --debug

      - name: Check for changed installable charts
        id: list-changed
        run: |
          changed=$(ct --config .github/ct.yaml list-changed)
          if [[ -n "$changed" ]]; then
            echo "::set-output name=changed::true"
          fi
      - name: Run helm unit tests
        if: steps.list-changed.outputs.changed == 'true'
        run: |
          helm plugin install https://github.com/quintush/helm-unittest
          for chart in $(ct --config .github/ct.yaml list-changed); do
            if [ -d "$chart/tests/" ]; then
              helm unittest -3 $chart
            else
              echo "No unit tests found for $chart"
            fi
          done
      - name: Setup Minikube
        uses: manusa/actions-setup-minikube@v2.4.3
        if: steps.list-changed.outputs.changed == 'true'
        with:
          minikube version: v1.20.0
          kubernetes version: ${{ matrix.kubernetes-version }}
          github token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/setup-go@v2
        if: steps.list-changed.outputs.changed == 'true'
        with:
          go-version: '1.18'
      - name: Create image for chart testing
        if: steps.list-changed.outputs.changed == 'true'
        run: |
          GOOS=linux GOARCH=amd64 make build # Set GOOS and GOARCH explicitly since Dockerfile expects them in the binary name
          DOCKER_BUILDKIT=1 docker build -t e2e/newrelic-infra-operator:test  .
          minikube image load e2e/newrelic-infra-operator:test
          kubectl create ns ct
      - name: Test install charts
        if: steps.list-changed.outputs.changed == 'true'
        run: ct install --namespace ct --config .github/ct.yaml --debug
      - name: Test upgrade charts
        if: steps.list-changed.outputs.changed == 'true'
        run: ct install --namespace ct --config .github/ct.yaml --debug --upgrade

  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        goos: [ linux ]
        goarch: [ amd64, arm64, arm ]
    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '1.18'

      # A cache entry is will be generated for `key`, and attempted to restore.
      # If `key` is not found, any partial match for `restore-keys` will be attempted.
      # Regardless of whether `key` was found or not, it will be created at the end of the run.
      # With this mechanism, we ensure caches are cycled regularly.
      - name: Go modules cache
        uses: actions/cache@v3.0.1
        with:
          path: ~/go/pkg/mod
          key: gomod-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            gomod-
      - name: Build cache
        uses: actions/cache@v3.0.1
        with:
          path: ~/.cache/go-build
          key: gobuild-${{ matrix.goos }}-${{ matrix.goarch }}-${{ github.sha }}
          restore-keys: |
            gobuild-${{ matrix.goos }}-${{ matrix.goarch }}

      - name: Build binary
        run: make build

      - name: Build Docker image
        if: matrix.goos == 'linux' && matrix.goarch == 'amd64'
        run: make image

      - name: Run CI checks
        if: matrix.goos == 'linux' && matrix.goarch == 'amd64'
        run: make ci

  integration:
    name: Integration and e2e
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.18'
        id: go
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - name: Go modules cache
        uses: actions/cache@v3.0.1
        with:
          path: ~/go/pkg/mod
          key: gomod-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            gomod-
      - name: Build cache
        uses: actions/cache@v3.0.1
        with:
          path: ~/.cache/go-build
          key: gobuild-linux-amd64-${{ github.sha }}
          restore-keys: |
            gobuild-linux-amd64

      - name: Install kind
        run: go install sigs.k8s.io/kind@v0.11.1

      - name: Create k8s Kind Cluster
        run: make kind-up

      - name: Run integration tests
        run: make test-integration

      - name: Build Docker image
        run: make image-push IMAGE_REPO=localhost:5000/newrelic-infra-operator

      - name: Create Helm release
        env:
          KUBECONFIG: ./kubeconfig
        run: |
          helm install newrelic-infra-operator ./charts/newrelic-infra-operator \
          --dependency-update \
          --values ./values-dev.yaml \
          --set image.repository=localhost:5000/newrelic-infra-operator

      - name: Run e2e tests
        run: make test-e2e

  lint:
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - name: Check linters are up to date
        run: make check-update-linters
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3.1.0
        with:
          # Optional: show only new issues if it's a pull request. The default value is `false`.
          only-new-issues: true
          version: v1.42.0

  codespell:
    name: Codespell
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v2
      - name: Codespell test
        uses: codespell-project/actions-codespell@master
        with:
          check_filenames: true
          check_hidden: true
          skip: ./.git,go.sum
