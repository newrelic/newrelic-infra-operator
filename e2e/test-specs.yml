description: |
  End-to-end tests for newrelic-infra-operator

custom_test_key: k8s.clusterName

scenarios:
  - description: |
      This scenario will verify that metrics from a k8s Cluster are correctly collected.
    before:
      # We need the metric definition from the `Metric` table
      # Since we cannot copy it from 
      - wget --quiet https://raw.githubusercontent.com/newrelic/nri-kubernetes/main/e2e/k8s.yml
      - helm dependency update ../charts/internal/e2e-resources
      - helm dependency update ../charts/newrelic-infra-operator
      - helm upgrade --install ${SCENARIO_TAG} --namespace nr-${SCENARIO_TAG} --create-namespace ../charts/newrelic-infra-operator --values e2e-values.yml --set global.licenseKey=${LICENSE_KEY} --set global.cluster=${SCENARIO_TAG}
      # Infra operator needs to be up and running so it can inject sidecars into E2E resources
      - sleep 30
      - helm upgrade --install ${SCENARIO_TAG}-resources --namespace nr-${SCENARIO_TAG} --create-namespace ../charts/internal/e2e-resources
      # Wait until sidecar is up and running before starting checks
      - sleep 60
    after:
      - kubectl logs --selector app.kubernetes.io/name=newrelic-infra-operator --namespace nr-${SCENARIO_TAG} --all-containers --prefix=true
      - kubectl get pods --namespace nr-${SCENARIO_TAG}
      - helm delete ${SCENARIO_TAG}-resources --namespace nr-${SCENARIO_TAG}
      - helm delete ${SCENARIO_TAG} --namespace nr-${SCENARIO_TAG}
      - rm k8s.yml
    tests:
      nrqls:
#        START Pod
        - query: FROM Metric SELECT latest(k8s.pod.isReady) AS 'Pod Ready' WHERE k8s.namespaceName = 'nr-${SCENARIO_TAG}' AND k8s.deploymentName = '${SCENARIO_TAG}-resources-deployment' AND k8s.podName LIKE '${SCENARIO_TAG}-resources-deployment%'
          expected_results:
            - key: "Pod Ready"
              value: 1.0
        - query: FROM Metric SELECT latest(k8s.pod.isScheduled) AS 'Pod Scheduled' WHERE k8s.namespaceName = 'nr-${SCENARIO_TAG}' AND k8s.deploymentName = '${SCENARIO_TAG}-resources-deployment' AND k8s.podName LIKE '${SCENARIO_TAG}-resources-deployment%'
          expected_results:
            - key: "Pod Scheduled"
              value: 1.0
        - query: FROM Metric SELECT latest(k8s.pod.createdAt) AS 'Created At' WHERE k8s.namespaceName = 'nr-${SCENARIO_TAG}' AND k8s.deploymentName = '${SCENARIO_TAG}-resources-deployment' AND k8s.podName LIKE '${SCENARIO_TAG}-resources-deployment%'
          expected_results:
            - key: "Created At"
              lowerBoundedValue: 0.0
        - query: FROM Metric SELECT max(k8s.pod.netTxBytesPerSecond) / 1000 AS 'Transferred (KBps)' WHERE k8s.namespaceName = 'nr-${SCENARIO_TAG}' AND k8s.deploymentName = '${SCENARIO_TAG}-resources-deployment' AND k8s.podName LIKE '${SCENARIO_TAG}-resources-deployment%'
          expected_results:
            - key: "Transferred (KBps)"
              lowerBoundedValue: 0.0
        - query: FROM Metric SELECT max(k8s.pod.netRxBytesPerSecond) / 1000 AS 'Received (KBps)' WHERE k8s.namespaceName = 'nr-${SCENARIO_TAG}' AND k8s.deploymentName = '${SCENARIO_TAG}-resources-deployment' AND k8s.podName LIKE '${SCENARIO_TAG}-resources-deployment%'
          expected_results:
            - key: "Received (KBps)"
              lowerBoundedValue: 0.0
        - query: FROM Metric SELECT max(k8s.pod.netErrorsPerSecond) AS 'Errors (per second)' WHERE k8s.namespaceName = 'nr-${SCENARIO_TAG}' AND k8s.deploymentName = '${SCENARIO_TAG}-resources-deployment' AND k8s.podName LIKE '${SCENARIO_TAG}-resources-deployment%'
          expected_results:
            - key: "Errors (per second)"
              lowerBoundedValue: 0.0
        - query: FROM Metric SELECT max(k8s.container.memoryRequestedBytes) / 1024 / 1024 AS 'Memory Requested (MiB)' WHERE k8s.namespaceName = 'nr-${SCENARIO_TAG}' AND k8s.deploymentName = '${SCENARIO_TAG}-resources-deployment' AND k8s.podName LIKE '${SCENARIO_TAG}-resources-deployment%' AND k8s.containerName = 'compute-pi-digits'
          expected_results:
            - key: "Memory Requested (MiB)"
              value: 15.0
        - query: FROM Metric SELECT max(k8s.container.memoryLimitBytes) / 1024 / 1024 AS 'Memory Limit (MiB)' WHERE k8s.namespaceName = 'nr-${SCENARIO_TAG}' AND k8s.deploymentName = '${SCENARIO_TAG}-resources-deployment' AND k8s.podName LIKE '${SCENARIO_TAG}-resources-deployment%' AND k8s.containerName = 'compute-pi-digits'
          expected_results:
            - key: "Memory Limit (MiB)"
              value: 30.0
        - query: FROM Metric SELECT max(k8s.container.cpuRequestedCores) AS 'CPU Requested (cores)' WHERE k8s.namespaceName = 'nr-${SCENARIO_TAG}' AND k8s.deploymentName = '${SCENARIO_TAG}-resources-deployment' AND k8s.podName LIKE '${SCENARIO_TAG}-resources-deployment%' AND k8s.containerName = 'compute-pi-digits'
          expected_results:
            - key: "CPU Requested (cores)"
              value: 0.04
        - query: FROM Metric SELECT max(k8s.container.cpuLimitCores) AS 'CPU Limit (cores)' WHERE k8s.namespaceName = 'nr-${SCENARIO_TAG}' AND k8s.deploymentName = '${SCENARIO_TAG}-resources-deployment' AND k8s.podName LIKE '${SCENARIO_TAG}-resources-deployment%' AND k8s.containerName = 'compute-pi-digits'
          expected_results:
            - key: "CPU Limit (cores)"
              value: 0.08
        - query: FROM Metric SELECT max(k8s.container.restartCount) AS 'Restarts cumulative' WHERE k8s.namespaceName = 'nr-${SCENARIO_TAG}' AND k8s.deploymentName = '${SCENARIO_TAG}-resources-deployment' AND k8s.podName LIKE '${SCENARIO_TAG}-resources-deployment%' AND k8s.containerName = 'compute-pi-digits'
          expected_results:
            - key: "Restarts cumulative"
              value: 0.0
        - query: FROM Metric SELECT max(k8s.container.cpuUsedCores) AS 'CPU usage (cores)' WHERE k8s.namespaceName = 'nr-${SCENARIO_TAG}' AND k8s.deploymentName = '${SCENARIO_TAG}-resources-deployment' AND k8s.podName LIKE '${SCENARIO_TAG}-resources-deployment%' AND k8s.containerName = 'compute-pi-digits'
          expected_results:
            - key: "CPU usage (cores)"
              lowerBoundedValue: 0.01
        - query: FROM Metric SELECT max(k8s.container.cpuCoresUtilization) / 100 AS 'CPU utilization (%)' WHERE k8s.namespaceName = 'nr-${SCENARIO_TAG}' AND k8s.deploymentName = '${SCENARIO_TAG}-resources-deployment' AND k8s.podName LIKE '${SCENARIO_TAG}-resources-deployment%' AND k8s.containerName = 'compute-pi-digits'
          expected_results:
            - key: "CPU utilization (%)"
              lowerBoundedValue: 0.01
        - query: FROM Metric SELECT max(k8s.container.cpuCfsThrottledPeriodsDelta) AS 'CPU Throttled Periods Delta' WHERE k8s.namespaceName = 'nr-${SCENARIO_TAG}' AND k8s.deploymentName = '${SCENARIO_TAG}-resources-deployment' AND k8s.podName LIKE '${SCENARIO_TAG}-resources-deployment%' AND k8s.containerName = 'compute-pi-digits'
          expected_results:
            - key: "CPU Throttled Periods Delta"
              lowerBoundedValue: 0.0
        - query: FROM Metric SELECT max(k8s.container.cpuCfsPeriodsDelta) AS 'CPU Periods Delta' WHERE k8s.namespaceName = 'nr-${SCENARIO_TAG}' AND k8s.deploymentName = '${SCENARIO_TAG}-resources-deployment' AND k8s.podName LIKE '${SCENARIO_TAG}-resources-deployment%' AND k8s.containerName = 'compute-pi-digits'
          expected_results:
            - key: "CPU Periods Delta"
              lowerBoundedValue: 0.0
        - query: FROM Metric SELECT max(k8s.container.memoryWorkingSetBytes) AS 'Memory usage (bytes)' WHERE k8s.namespaceName = 'nr-${SCENARIO_TAG}' AND k8s.deploymentName = '${SCENARIO_TAG}-resources-deployment' AND k8s.podName LIKE '${SCENARIO_TAG}-resources-deployment%' AND k8s.containerName = 'compute-pi-digits'
          expected_results:
            - key: "Memory usage (bytes)"
              lowerBoundedValue: 1.0
        - query: FROM Metric SELECT max(k8s.container.memoryWorkingSetUtilization) / 100 AS 'Memory utilization (%)' WHERE k8s.namespaceName = 'nr-${SCENARIO_TAG}' AND k8s.deploymentName = '${SCENARIO_TAG}-resources-deployment' AND k8s.podName LIKE '${SCENARIO_TAG}-resources-deployment%' AND k8s.containerName = 'compute-pi-digits'
          expected_results:
            - key: "Memory utilization (%)"
              lowerBoundedValue: 0.01
        - query: FROM Metric SELECT max(k8s.container.fsUsedBytes) AS 'Filesystem used (bytes)' WHERE k8s.namespaceName = 'nr-${SCENARIO_TAG}' AND k8s.deploymentName = '${SCENARIO_TAG}-resources-deployment' AND k8s.podName LIKE '${SCENARIO_TAG}-resources-deployment%' AND k8s.containerName = 'compute-pi-digits'
          expected_results:
            - key: "Filesystem used (bytes)"
              lowerBoundedValue: 1.0
        - query: FROM Metric SELECT max(k8s.container.fsUsedPercent) / 100 AS 'Filesystem Utilization (%)' WHERE k8s.namespaceName = 'nr-${SCENARIO_TAG}' AND k8s.deploymentName = '${SCENARIO_TAG}-resources-deployment' AND k8s.podName LIKE '${SCENARIO_TAG}-resources-deployment%' AND k8s.containerName = 'compute-pi-digits'
          expected_results:
            - key: "Filesystem Utilization (%)"
              lowerBoundedValue: 0.0000001
#        END Pod
      entities: []
      metrics:
        - source: "k8s.yml"
          # EXCEPTIONS_SOURCE_FILE contains the path to the exceptions according to the k8s version.
          # These exceptions files live in '/e2e' path and are selected on the GH e2e workflow.
          exceptions_source: ${EXCEPTIONS_SOURCE_FILE}
          except_entities:
            - K8sCluster # all metrics are related to controlPlane
            - K8sCronjob
            - K8sDaemonset
            - K8sDeployment
            - K8sEndpoint
            - K8sJob
            - K8sNamespace
            - K8sPersistentVolume
            - K8sPersistentVolumeClaim
            - K8sReplicaset
            - K8sService
            - K8sStatefulset
            - K8sHpaSample
          except_metrics:
            - k8s.container.restartCountDelta
            - k8s.container.oomEventsDelta

            - k8s.node.allocatableHugepages*
            - k8s.node.capacity*
            - k8s.node.capacityAttachableVolumes*
            - k8s.node.allocatableAttachableVolumes*
